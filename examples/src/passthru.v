`timescale  1 ns / 100 ps
// generated by chat GPT o1-preview
// passthrough.v
//
// This Verilog module implements a configurable pass-through for:
// 1. AXI4-Stream (s_axis to m_axis)
// 2. AXI4-Lite Memory-Mapped (s_axi to m_axi)
//
// The interface widths are configurable via parameters.
//
// AXI4-Stream signals are directly connected from slave to master.
// AXI4-Lite signals are directly connected from slave to master.
// No buffering or internal logic is applied; it's a pure pass-through.

module passthrough #(
  // AXI4-Stream Parameters
  parameter integer DATA_WIDTH  = 32,  // AXI Stream Data width
  parameter integer USER_WIDTH  = 1,   // AXI Stream User signal width
  parameter integer DEST_WIDTH  = 1,   // AXI Stream Destination signal width
  parameter integer ID_WIDTH    = 1,   // AXI Stream ID signal width

  // AXI4-Lite Memory-Mapped Parameters
  parameter integer AXI_ADDR_WIDTH = 32, // AXI Lite Address width
  parameter integer AXI_ID_WIDTH   = 1,  // AXI Lite ID width (typically 0 or 1 for AXI4-Lite)
  parameter integer AXI_DATA_WIDTH = 32  // AXI Lite Data width (e.g., 32 or 64)
)
(
  // Global Clock and Reset
  input wire        clk,      // Global clock signal
  input wire        rst,   // Global active-low reset signal

  // AXI4-Stream Slave Interface (s_axis)
  input wire  [DATA_WIDTH-1:0]  s_axis_tdata,
  input wire  [USER_WIDTH-1:0]  s_axis_tuser,
  input wire  [DEST_WIDTH-1:0]  s_axis_tdest,
  input wire  [ID_WIDTH-1:0]    s_axis_tid,
  input wire  [DATA_WIDTH/8-1:0]  s_axis_tkeep,
  input wire                    s_axis_tlast,
  input wire                    s_axis_tvalid,
  output wire                   s_axis_tready,

  // AXI4-Stream Master Interface (m_axis)
  output wire [DATA_WIDTH-1:0]  m_axis_tdata,
  output wire [USER_WIDTH-1:0]  m_axis_tuser,
  output wire [DEST_WIDTH-1:0]  m_axis_tdest,
  output wire [ID_WIDTH-1:0]    m_axis_tid,
  input wire  [DATA_WIDTH/8-1:0]  m_axis_tkeep,
  output wire                   m_axis_tlast,
  output wire                   m_axis_tvalid,
  input wire                    m_axis_tready,


  // AXI4-Lite Memory-Mapped Slave Interface (s_axi)
  // Write Address Channel
  input wire  [AXI_ID_WIDTH-1:0]    s_axi_awid,
  input wire  [AXI_ADDR_WIDTH-1:0]  s_axi_awaddr,
  input wire  [7:0]                 s_axi_awlen,
  input wire  [2:0]                 s_axi_awprot,
  input wire                        s_axi_awvalid,
  output wire                       s_axi_awready,

  // Write Data Channel
  input wire  [AXI_DATA_WIDTH-1:0]  s_axi_wdata,
  input wire  [AXI_DATA_WIDTH/8-1:0] s_axi_wstrb,
  input wire                        s_axi_wvalid,
  input wire                        s_axi_wlast,
  output wire                       s_axi_wready,

  // Write Response Channel
  output wire [AXI_ID_WIDTH-1:0]    s_axi_bid,
  output wire [1:0]                 s_axi_bresp,
  output wire                       s_axi_bvalid,
  input wire                        s_axi_bready,

  // Read Address Channel
  input wire  [AXI_ID_WIDTH-1:0]    s_axi_arid,
  input wire  [AXI_ADDR_WIDTH-1:0]  s_axi_araddr,
  input wire  [2:0]                 s_axi_arprot,
  input wire                        s_axi_arvalid,
  output wire                       s_axi_arready,

  // Read Data Channel
  output wire [AXI_ID_WIDTH-1:0]    s_axi_rid,
  output wire [AXI_DATA_WIDTH-1:0]  s_axi_rdata,
  output wire [1:0]                 s_axi_rresp,
  output wire                       s_axi_rvalid,
  output wire                       s_axi_rlast,
  input wire                        s_axi_rready,


  // AXI4-Lite Memory-Mapped Master Interface (m_axi)
  // Write Address Channel
  output wire [AXI_ID_WIDTH-1:0]    m_axi_awid,
  output wire [AXI_ADDR_WIDTH-1:0]  m_axi_awaddr,
  output wire [7:0]                 m_axi_awlen,
  output wire [2:0]                 m_axi_awprot,
  output wire                       m_axi_awvalid,
  input wire                        m_axi_awready,

  // Write Data Channel
  output wire [AXI_DATA_WIDTH-1:0]  m_axi_wdata,
  output wire [AXI_DATA_WIDTH/8-1:0] m_axi_wstrb,
  output wire                       m_axi_wvalid,
  output wire                       m_axi_wlast,
  input wire                        m_axi_wready,

  // Write Response Channel
  input wire  [AXI_ID_WIDTH-1:0]    m_axi_bid,
  input wire  [1:0]                 m_axi_bresp,
  input wire                        m_axi_bvalid,
  output wire                       m_axi_bready,

  // Read Address Channel
  output wire [AXI_ID_WIDTH-1:0]    m_axi_arid,
  output wire [AXI_ADDR_WIDTH-1:0]  m_axi_araddr,
  output wire [2:0]                 m_axi_arprot,
  output wire                       m_axi_arvalid,
  input wire                        m_axi_arready,

  // Read Data Channel
  input wire  [AXI_ID_WIDTH-1:0]    m_axi_rid,
  input wire  [AXI_DATA_WIDTH-1:0]  m_axi_rdata,
  input wire  [1:0]                 m_axi_rresp,
  input wire                        m_axi_rvalid,
  input wire                        m_axi_rlast,
  output wire                       m_axi_rready
);

  // --- AXI4-Stream Pass-through Connections ---
  // Slave to Master Data, ID, Dest, User, Strobe, Keep, Last, Valid
  assign m_axis_tdata  = s_axis_tdata;
  assign m_axis_tuser  = s_axis_tuser;
  assign m_axis_tdest  = s_axis_tdest;
  assign m_axis_tid    = s_axis_tid;
  assign m_axis_tkeep  = s_axis_tkeep;
  assign m_axis_tlast  = s_axis_tlast;
  assign m_axis_tvalid = s_axis_tvalid;

  // Master to Slave Ready
  assign s_axis_tready = m_axis_tready;


  // --- AXI4-Lite Memory-Mapped Pass-through Connections ---

  // Write Address Channel (AW)
  assign m_axi_awid    = s_axi_awid;
  assign m_axi_awaddr  = s_axi_awaddr;
  assign m_axi_awlen  = s_axi_awlen;
  assign m_axi_awprot  = s_axi_awprot;
  assign m_axi_awvalid = s_axi_awvalid;
  assign s_axi_awready = m_axi_awready;

  // Write Data Channel (W)
  assign m_axi_wdata   = s_axi_wdata;
  assign m_axi_wstrb   = s_axi_wstrb;
  assign m_axi_wvalid  = s_axi_wvalid;
  assign m_axi_wlast  = s_axi_wlast;
  assign s_axi_wready  = m_axi_wready;

  // Write Response Channel (B)
  assign s_axi_bid     = m_axi_bid;
  assign s_axi_bresp   = m_axi_bresp;
  assign s_axi_bvalid  = m_axi_bvalid;
  assign m_axi_bready  = s_axi_bready;

  // Read Address Channel (AR)
  assign m_axi_arid    = s_axi_arid;
  assign m_axi_araddr  = s_axi_araddr;
  assign m_axi_arprot  = s_axi_arprot;
  assign m_axi_arvalid = s_axi_arvalid;
  assign s_axi_arready = m_axi_arready;

  // Read Data Channel (R)
  assign s_axi_rid     = m_axi_rid;
  assign s_axi_rdata   = m_axi_rdata;
  assign s_axi_rresp   = m_axi_rresp;
  assign s_axi_rvalid  = m_axi_rvalid;
  assign s_axi_rlast  = m_axi_rlast;
  assign m_axi_rready  = s_axi_rready;

endmodule
